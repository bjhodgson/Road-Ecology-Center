#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv")
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv")
df$NearBridge <- 0
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv")
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv")
View(df)
sum(df$VCU == 0)
sum(df$VCU == 0, na.rm = TRUE)
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv")
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv")
View(df)
sum(df$VCU == 0, na.rm = TRUE)
# Identify bridge points
bridge_indices <- which(df$VCU == 0)
# Mark points within 1 mile (53 points) of a bridge
df$near_bridge <- 0
for (bridge_idx in bridge_indices) {
# Mark points within 1 mile before the bridge
start_idx <- max(1, bridge_idx - 53)
df$near_bridge[start_idx:bridge_idx] <- 1
# Mark points within 1 mile after the bridge
end_idx <- min(nrow(gdf), bridge_idx + 53)
df$near_bridge[bridge_idx:end_idx] <- 1
}
for (bridge_idx in bridge_indices) {
# Mark points within 1 mile before the bridge
start_idx <- max(1, bridge_idx - 53)
df$near_bridge[start_idx:bridge_idx] <- 1
# Mark points within 1 mile after the bridge
end_idx <- min(nrow(df), bridge_idx + 53)
df$near_bridge[bridge_idx:end_idx] <- 1
}
head(df)
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
write.csv(df, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table.csv", row.names = FALSE) # Ben path
df1 <- df$OBJECTID < 500000
df1 <- df[df$OBJECTID < 500000, ]
View(df1)
df1 <- df[df$OBJECTID =< 500000, ]
df1 <- df[df$OBJECTID <= 500000, ]
# Test subset
df <- df[df$OBJECTID <= 500000, ]
# Identify bridge points
bridge_indices <- which(df$VCU == 0)
# Mark points within 1 mile (53 points) of a bridge
df$near_bridge <- 0
# Read in csv as dataframe
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv") # Leo path
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv") # Ben path
# Test subset
df <- df[df$OBJECTID <= 500000, ]
# Identify bridge points
bridge_indices <- which(df$VCU == 0)
# Mark points within 1 mile (53 points) of a bridge
df$near_bridge <- 0
for (bridge_idx in bridge_indices) {
# Mark point at bridge
df$near_bridge[bridge_idx] <- 1
# Mark points within 1 mile before the bridge
start_idx <- max(1, bridge_idx - 53)
df$near_bridge[start_idx:bridge_idx] <- 1
# Mark points within 1 mile after the bridge
end_idx <- min(nrow(df), bridge_idx + 53)
df$near_bridge[bridge_idx:end_idx] <- 1
}
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
write.csv(df, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table.csv", row.names = FALSE) # Ben path
# Read in csv as dataframe
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv") # Leo path
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv") # Ben path
# Test subset
df <- df[df$OBJECTID <= 500000, ]
# Read in csv as dataframe
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv") # Leo path
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv") # Ben path
# Identify bridge points
bridge_indices <- which(df$VCU == 0)
# Mark points within 1 mile (53 points) of a bridge
df$near_bridge <- 0
for (bridge_idx in bridge_indices) {
# Mark point at bridge
df$near_bridge[bridge_idx] <- 1
# Mark points within 1 mile before the bridge
start_idx <- max(1, bridge_idx - 53)
df$near_bridge[start_idx:bridge_idx] <- 1
# Mark points within 1 mile after the bridge
end_idx <- min(nrow(df), bridge_idx + 53)
df$near_bridge[bridge_idx:end_idx] <- 1
}
View(df)
# Filter df by points further than 2 miles from a bridge
df_filtered <- which(df$near_bridge == 0)
# Filter df by points further than 2 miles from a bridge
df_filtered <- df(which(df$near_bridge == 0))
# Filter df by points further than 2 miles from a bridge
df_filtered <- df(which(df$near_bridge == 0))
# Filter df by points further than 2 miles from a bridge
df_filtered <- df[df$near_bridge == 0, ]
View(df_filtered)
library(dplyr)
summary(df$annl_nc)
# Filter df
df_filtered <- df %>%
filter(near_bridge == 0) %>% # Filter by points further than 2 miles from nearest bridge
filter(annl_nc > 0.5)
View(df_filtered)
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
write.csv(df, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table1.csv", row.names = FALSE) # Ben path
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
write.csv(df_filtered, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table1.csv", row.names = FALSE) # Ben path
# Filter df
df_filtered <- df %>%
filter(near_bridge == 0) %>% # Filter by points further than 2 miles from nearest bridge
filter(annl_nc > 2) # Filter by high annual roadkill
View(df_filtered)
count(unique(df_filtered$ORIG_FID))
unique(df_filtered$ORIG_FID)
nrow(unique(df_filtered$ORIG_FID))
summarize(unique(df_filtered$ORIG_FID))
length(unique(df_filtered$ORIG_FID))
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
write.csv(df_filtered, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table2.csv", row.names = FALSE) # Ben path
colnames(df_filtered)
# Copy 'ORIG_SEQ' to the new column 'sequence_id'
df_seq <- df_filtered %>%
mutate(sequence_id = ORIG_SEQ)
# Filter df
df_filtered <- df %>%
filter(near_bridge == 0) %>% # Filter by points further than 2 miles from nearest bridge
filter(annl_nc > 2) # Filter by high annual roadkill
colnames(df_filtered)
# Copy 'ORIG_FID' to the new column 'sequence_id'
df_seq <- df_filtered %>%
mutate(sequence_id = ORIG_FID)
# Iterate over each row to adjust the sequence IDs
for (i in 2:nrow(df_seq)) {
# Check if the current ORIG_SEQ is consecutive to the previous one
if (df_seq$ORIG_FID[i] == df_seq$ORIG_FID[i - 1] + 1) {
# If consecutive, assign the previous sequence ID to the current row
df_seq$sequence_id[i] <- df_seq$sequence_id[i - 1]
}
}
length(unique(df_filtered$ORIG_FID))
length(unique(df_deq$sequence_id))
length(unique(df_seq$sequence_id))
View(df_seq)
df_seq <- df_filtered %>%
group_by(ORIG_FID) %>%
mutate(sequence_id = cumsum(c(0, diff(ORIG_FID) != 1)))
View(df_seq)
print(df_seq$ORIG_FID)
# Group points by 'ORIG_FID' and assign a sequence
df_seq <- df_filtered %>%
mutate(group_id = cumsum(c(1, diff(ORIG_FID) != 1)))
# Group points by 'ORIG_FID' and assign a sequence
df_seq <- df_filtered %>%
mutate(group_id = cumsum(c(1, diff(ORIG_FID) != 1)))
View(df_seq)
# For the first occurrence of each unique 'ORIG_FID', set the 'group_id' to 1
df_seq$group_id[match(unique(df_seq$ORIG_FID), df_seq$ORIG_FID)] <- 1
View(df_seq)
# Group points by ORIG_FID and arrange them by ORIG_FID within each group
df_grouped <- df_filtered %>%
group_by(ORIG_FID) %>%
arrange(ORIG_FID)
View(df_grouped)
# Create a new column indicating the group ID for each point
df_grouped <- df_grouped %>%
mutate(group_id = cumsum(c(1, diff(ORIG_FID) != 1)))
View(df_grouped)
df_grouped$group_id
# Step 1: Identify start and end points of each line segment
start_points <- df_filtered[df_filtered$ORIG_FID == 1, ]
end_points <- df_filtered[df_filtered$ORIG_FID == max(df_filtered$ORIG_FID), ]
# Step 2: Create a new dataframe to store the connected lines
connected_lines <- data.frame()
# Step 3: Iterate over the original dataframe to connect the lines
for (i in 1:(max(df_filtered$ORIG_FID) - 1)) {
start_point <- end_points[end_points$ORIG_FID == i, ]
end_point <- start_points[start_points$ORIG_FID == (i + 1), ]
connected_line <- rbind(start_point, end_point)
connected_lines <- rbind(connected_lines, connected_line)
}
View(connected_lines)
connected_lines <- data.frame()
# Step 1: Create a function to connect lines
connect_lines <- function(df) {
connected_lines <- data.frame()
for (i in 1:(nrow(df) - 1)) {
connected_line <- rbind(df[i, ], df[i + 1, ])
connected_lines <- rbind(connected_lines, connected_line)
}
return(connected_lines)
}
# Step 2: Apply the function to each group of consecutive rows with ORIG_FID differing by 1
library(dplyr)
connected_lines <- df_filtered %>%
group_by(group = cumsum(c(1, diff(ORIG_FID) != 1))) %>%
group_split() %>%
lapply(connect_lines) %>%
bind_rows()
# Print the result
print(connected_lines)
# Print the result
print(connected_lines$group)
View(connected_line)
View(connected_lines)
# Get all unique ORIG_FID values
unique_ids <- unique(df_filtered$ORIG_FID)
# Initialize a list to store pairs of consecutive values
consecutive_pairs <- list()
# Iterate over the unique IDs
for (i in 1:(length(unique_ids) - 1)) {
# Check if the next ID is consecutive
if (unique_ids[i] + 1 == unique_ids[i + 1]) {
# Add the pair of consecutive IDs to the list
consecutive_pairs[[length(consecutive_pairs) + 1]] <- c(unique_ids[i], unique_ids[i + 1])
}
}
# Print the consecutive pairs
print(consecutive_pairs)
length(consecutive_pairs)
df_filtered$new_sequence <- NA
# Read in csv as dataframe
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv") # Leo path
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv") # Ben path
# Identify bridge points
bridge_indices <- which(df$VCU == 0)
# Mark points within 1 mile (53 points) of a bridge
df$near_bridge <- 0
for (bridge_idx in bridge_indices) {
# Mark point at bridge
df$near_bridge[bridge_idx] <- 1
# Mark points within 1 mile before the bridge
start_idx <- max(1, bridge_idx - 53)
df$near_bridge[start_idx:bridge_idx] <- 1
# Mark points within 1 mile after the bridge
end_idx <- min(nrow(df), bridge_idx + 53)
df$near_bridge[bridge_idx:end_idx] <- 1
}
# Filter df
df_filtered <- df %>%
filter(near_bridge == 0) %>% # Filter by points further than 2 miles from nearest bridge
filter(annl_nc > 2) # Filter by high annual roadkill
df_filtered$new_sequence <- NA
View(df_filtered)
# Iterate over the unique IDs
for (i in 1:(length(df_filtered -1))) {
# Check if the next ID is consecutive
if (df_filtered$ORIG_FID[i] + 1 == df_filtered$ORIG_FID[i + 1]) {
# Add the pair of consecutive IDs to the list
df_filtered$new_sequence[i+1] = df_filtered$ORIG_FID[i]
}
}
# Add the current ID to the new sequence column
df_filtered$new_sequence[i] = df_filtered$ORIG_FID[i]
# Iterate over the unique IDs
for (i in 1:(length(df_filtered -1))) {
# Check if the next ID is consecutive
if (df_filtered$ORIG_FID[i] + 1 == df_filtered$ORIG_FID[i + 1]) {
# Add the current ID to the new sequence column
df_filtered$new_sequence[i] = df_filtered$ORIG_FID[i]
df_filtered$new_sequence[i+1] = df_filtered$ORIG_FID[i]
}
}
# Iterate over the unique IDs
for (i in 1:(length(df_filtered) -1 )) {
# Check if the next ID is consecutive
if (df_filtered$ORIG_FID[i] + 1 == df_filtered$ORIG_FID[i + 1]) {
# Add the current ID to the new sequence column
df_filtered$new_sequence[i] = df_filtered$ORIG_FID[i]
df_filtered$new_sequence[i+1] = df_filtered$ORIG_FID[i]
}
}
View(df_filtered)
df_filtered$new_sequence <- 0
# Iterate over the unique IDs
for (i in 1:(length(df_filtered) -1 )) {
# Check if the next ID is consecutive
if (df_filtered$ORIG_FID[i] + 1 == df_filtered$ORIG_FID[i + 1]) {
# Add the current ID to the new sequence column
df_filtered$new_sequence[i] = df_filtered$ORIG_FID[i]
df_filtered$new_sequence[i+1] = df_filtered$ORIG_FID[i]
}
}
View(df_filtered)
# Initialize new_sequence with NA
df_filtered$new_sequence <- NA
# Initialize variable to keep track of the current sequence number
current_sequence <- 1
# Initialize variable to keep track of the previous ORIG_FID
previous_orig_fid <- df_filtered$ORIG_FID[1]
# Assign initial new_sequence value
df_filtered$new_sequence[1] <- current_sequence
# Iterate over the rows of the dataframe starting from the second row
for (i in 2:nrow(df_filtered)) {
# Check if the current ORIG_FID is the same as the previous one
if (df_filtered$ORIG_FID[i] == previous_orig_fid) {
# Assign the same new_sequence value as the previous point
df_filtered$new_sequence[i] <- current_sequence
} else {
# Check the difference between current and previous ORIG_FID
if (df_filtered$ORIG_FID[i] - previous_orig_fid == 1) {
# Assign the same new_sequence value as the previous point
df_filtered$new_sequence[i] <- current_sequence
} else {
# Increment the current sequence number
current_sequence <- current_sequence + 1
# Assign a new new_sequence value
df_filtered$new_sequence[i] <- current_sequence
}
}
# Update the previous ORIG_FID for the next iteration
previous_orig_fid <- df_filtered$ORIG_FID[i]
}
View(df_filtered)
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
write.csv(df_filtered, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table5.csv", row.names = FALSE) # Ben path
library(dplyr)
# Read in csv as dataframe
#df <- read.csv("C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\top_half.csv") # Leo path
df <- read.csv("H:\\hotspots\\fencing_crossings\\output_data\\points_table.csv") # Ben path
# Test subset
#df <- df[df$OBJECTID <= 500000, ]
# Identify bridge points
bridge_indices <- which(df$VCU == 0)
# Mark points within 2 miles (2*53 points) of a bridge
df$near_bridge <- 0
bridge_distance <- 2*53
for (bridge_idx in bridge_indices) {
# Mark point at bridge
df$near_bridge[bridge_idx] <- 1
# Mark points within 2 miles before the bridge
start_idx <- max(1, bridge_idx - bridge_distance)
df$near_bridge[start_idx:bridge_idx] <- 1
# Mark points within 1 mile after the bridge
end_idx <- min(nrow(df), bridge_idx + bridge_distance)
df$near_bridge[bridge_idx:end_idx] <- 1
}
# Filter df
df_filtered <- df %>%
filter(near_bridge == 0) %>% # Filter by points further than 2 miles from nearest bridge
filter(annl_nc > 2) # Filter by high annual roadkill
# Reorder points to combine adjacent lines
# Initialize new_sequence with NA
df_filtered$new_sequence <- NA
# Initialize variable to keep track of the current sequence number
current_sequence <- 1
# Initialize variable to keep track of the previous ORIG_FID
previous_orig_fid <- df_filtered$ORIG_FID[1]
# Assign initial new_sequence value
df_filtered$new_sequence[1] <- current_sequence
# Iterate over the rows of the dataframe starting from the second row
for (i in 2:nrow(df_filtered)) {
# Check if the current ORIG_FID is the same as the previous one
if (df_filtered$ORIG_FID[i] == previous_orig_fid) {
# Assign the same new_sequence value as the previous point
df_filtered$new_sequence[i] <- current_sequence
} else {
# Check the difference between current and previous ORIG_FID
if (df_filtered$ORIG_FID[i] - previous_orig_fid == 1) {
# Assign the same new_sequence value as the previous point
df_filtered$new_sequence[i] <- current_sequence
} else {
# Increment the current sequence number
current_sequence <- current_sequence + 1
# Assign a new new_sequence value
df_filtered$new_sequence[i] <- current_sequence
}
}
# Update the previous ORIG_FID for the next iteration
previous_orig_fid <- df_filtered$ORIG_FID[i]
}
# Save the edited dataset
#write.csv(df, "C:\\Users\\Leo Hecht\\Documents\\Road Ecology\\Hotspot Report\\edited_dataset.csv", row.names = FALSE) # Leo path
#write.csv(df_filtered, "H:\\hotspots\\fencing_crossings\\output_data\\updated_points_table5.csv", row.names = FALSE) # Ben path
length(unique(df_filtered$new_sequence)
length(unique(df_filtered$new_sequence)
length(unique(df_filtered$new_sequence))

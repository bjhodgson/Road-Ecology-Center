library(readxl)
library(dplyr)
library(ggplot2)
# Specify the path to your main directory
main_directory <- "D:\\Documents\\road-ecology-center\\median_barriers\\CROS_medians_dataset"
list.files(main_directory)
list.files(path = main_directory, pattern = "*.xlsx", full.names = TRUE)
list.files(path = main_directory, pattern = "*.xls", full.names = TRUE)
# Load necessary packages
library(readxl)
library(dplyr)
# Function to list xlsx and xls files in a given directory
list_excel_files <- function(directory) {
xlsx_files <- list.files(path = directory, pattern = "*.xlsx", full.names = TRUE)
xls_files <- list.files(path = directory, pattern = "*.xls", full.names = TRUE)
c(xlsx_files, xls_files)
}
# Specify the path to your directory containing Excel files
directory_path <- "D:\\Documents\\road-ecology-center\\median_barriers\\CROS_medians_dataset"
# Get a list of Excel files from the directory
file_list <- list_excel_files(directory_path)
file_list
# Function to list xlsx and xls files in a given directory
list_excel_files <- function(directory) {
#  xlsx_files <- list.files(path = directory, pattern = "*.xlsx", full.names = TRUE)
xls_files <- list.files(path = directory, pattern = "*.xls", full.names = TRUE)
c(xlsx_files, xls_files)
}
# Specify the path to your directory containing Excel files
directory_path <- "D:\\Documents\\road-ecology-center\\median_barriers\\CROS_medians_dataset"
# Get a list of Excel files from the directory
file_list <- list_excel_files(directory_path)
# Function to list xlsx and xls files in a given directory
list_excel_files <- function(directory) {
#  xlsx_files <- list.files(path = directory, pattern = "*.xlsx", full.names = TRUE)
xls_files <- list.files(path = directory, pattern = "*.xls", full.names = TRUE)
c(xls_files)
}
# Specify the path to your directory containing Excel files
directory_path <- "D:\\Documents\\road-ecology-center\\median_barriers\\CROS_medians_dataset"
# Get a list of Excel files from the directory
file_list <- list_excel_files(directory_path)
file_list
# Read each Excel file into a list of dataframes
df_list <- lapply(file_list, read_excel)
# Combine the dataframes into one dataframe
combined_df <- bind_rows(df_list)
View(combined_df)
# Function to list xlsx and xls files in a given directory
list_excel_files <- function(directory) {
xls_files <- list.files(path = directory, pattern = "*.xls", full.names = TRUE)
c(xls_files)
}
# Install and load necessary packages
# install.packages("readxl")
# install.packages("dplyr")
# install.packages("ggplot2")
library(readxl)
library(dplyr)
library(ggplot2)
# Function to list xlsx and xls files in a given directory
list_excel_files <- function(directory) {
xls_files <- list.files(path = directory, pattern = "*.xls", full.names = TRUE)
c(xls_files)
}
# Specify the path to your directory containing Excel files
directory_path <- "D:\\Documents\\road-ecology-center\\median_barriers\\CROS_medians_dataset"
# Get a list of Excel files from the directory
file_list <- list_excel_files(directory_path)
# Read each Excel file into a list of dataframes
df_list <- lapply(file_list, read_excel)
# Combine the dataframes into one dataframe
combined_df <- bind_rows(df_list)
# View the combined dataframe
print(combined_df)
# List of columns to remove
columns_to_remove <- c(
"OBJECTID", "Join_Count",	"TARGET_FID",
"TARGET_FID_1", "Valid_Pair", "Highway_SR", "New_ID", "Field15", "FID_1",
"Join_Count_1", "TARGET_F_1", "Id", "ORIG_FID", "ORIG_SEQ",
"Field15_1", "NEAR_FID", "NEAR_DIST", "NEAR_X", "NEAR_Y", "DDLat", "DDLon", "ORIG_OID",
"Field15_12", "Field15_13", "Valid_Pa_2", "Valid_Pa_3", "Highway__2", "Highway__3",
"TARGET_F_2", "New_ID_12", "New_ID__13", "TARGET_F_3"
)
# Remove the specified columns
cleaned_df <- combined_df %>% select(-one_of(columns_to_remove))
# Visualize histogram of hits per median type
cleaned_df %>%
group_by(New_ID_1) %>%
summarise(count = n()) %>%
ggplot(aes(x = New_ID_1, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
ncol(cleaned_df)
colnames(cleaned_df)
View(cleaned_df)
any.na(cleaned_df$New_ID_1)
is.na(cleaned_df$New_ID_1)
any(is.na(cleaned_df$New_ID_1))
# Visualize histogram of hits per median type
cleaned_df %>%
group_by(New_ID_1) %>%
summarise(count = n()) %>%
ggplot(aes(x = New_ID_1, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
# Filter out NA values from the cleaned dataframe
cleaned_df_filtered <- cleaned_df[!is.na(cleaned_df$New_ID_1), ]
nrow(cleaned_df)
nrow(cleaned_df_filtered)
# Visualize histogram of hits per median type
cleaned_df_filtered %>%
group_by(New_ID_1) %>%
summarise(count = n()) %>%
ggplot(aes(x = New_ID_1, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
colnames(cleaned_df)
# List of columns to remove
columns_to_remove <- c(
"OBJECTID", "Join_Count",	"TARGET_FID",
"TARGET_FID_1", "Valid_Pair", "Highway_SR", "New_ID", "Field15", "FID_1",
"Join_Count_1", "TARGET_F_1", "Id", "ORIG_FID", "ORIG_SEQ",
"Field15_1", "NEAR_FID", "NEAR_DIST", "NEAR_X", "NEAR_Y", "DDLat", "DDLon", "ORIG_OID",
"Field15_12", "Field15_13", "Valid_Pa_2", "Valid_Pa_3", "Highway__2", "Highway__3",
"TARGET_F_2", "New_ID_12", "New_ID__13", "TARGET_F_3", "OBJECTID_1", "FID_", "Latitude_1",
"Longitud_1"
)
# Remove the specified columns
cleaned_df <- combined_df %>% select(-one_of(columns_to_remove))
# Filter out NA values from the cleaned dataframe
cleaned_df_filtered <- cleaned_df[!is.na(cleaned_df$New_ID_1), ]
# Visualize histogram of hits per median type
cleaned_df_filtered %>%
group_by(New_ID_1) %>%
summarise(count = n()) %>%
ggplot(aes(x = New_ID_1, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
View(cleaned_df_filtered)
View(cleaned_df_filtered)
# Visualize histogram of hits by median type
cleaned_df_filtered %>%
group_by(Pair_Type) %>%
summarise(count = n()) %>%
ggplot(aes(x = Pair_Type, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
# Calculate the total count of observations
total_count <- nrow(cleaned_df_filtered)
# Calculate the counts for each median type
counts <- cleaned_df_filtered %>%
group_by(Pair_Type) %>%
summarise(count = n())
# Normalize the counts by dividing by the total count
counts_normalized <- counts %>%
mutate(count_normalized = count / total_count)
# Visualize histogram of hits per median type with normalized counts
ggplot(counts_normalized, aes(x = New_ID_1, y = count_normalized)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Normalized Frequency of 'New_ID_1' Values", x = "Value", y = "Normalized Count") +
theme_minimal()
# Visualize histogram of hits per median type with normalized counts
ggplot(counts_normalized, aes(x = Pair_Type, y = count_normalized)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Normalized Frequency of 'Pair_Type' Values", x = "Value", y = "Normalized Count") +
theme_minimal()
View(cleaned_df_filtered)
concrete_median <- nrow(cleaned_df_filtered)
concrete_median <- colname(cleaned_df_filtered)
concrete_median <- colnames(cleaned_df_filtered)
concrete_median <- colnames(cleaned_df_filtered)
concrete_median <- col(cleaned_df_filtered)
# Add concrete binary
cleaned_df_filtered$concrete_median <- ifelse(cleaned_df_filtered$New_ID_1 == "conc", 1, 0)
View(cleaned_df_filtered)
# Add concrete binary
cleaned_df_filtered$concrete_median <- ifelse(cleaned_df_filtered$New_ID_1 == "con", 1, 0)
ggplot(cleaned_df_filtered, aes(x = concrete_median)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of 'his' Column", x = "Value", y = "Count") +
theme_minimal()
head(cleaned_df_filtered)
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs other median type
ggplot(cleaned_df_filtered, aes(x = concrete_median)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of 'his' Column", x = "Value", y = "Count") +
theme_minimal()
# Create a histogram
hist(cleaned_df_filtered$concrete_median, breaks = c(-0.5, 0.5, 1.5), col = c("red", "blue"),
xlab = "Tag", ylab = "Frequency", main = "Histogram of Tagged Data")
# Add legend
legend("topright", legend = c("0", "1"), fill = c("red", "blue"))
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of 'New_ID_1' Values", x = "Value", y = "Count") +
theme_minimal()
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians, x = "Value", y = "Count") +
theme_minimal()
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Value", y = "Count") +
theme_minimal()
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) <- counts_list
counts_lit <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n())
counts_lit
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
as.table()
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) #%>%
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) #%>%
View(contingency_table)
# Spread the summarized data into a contingency table format
contingency_table <- cleaned_df_filtered %>%
spread(key = concrete_median, value = count, fill = 0)
library(dplyr)
# Spread the summarized data into a contingency table format
contingency_table <- cleaned_df_filtered %>%
spread(key = concrete_median, value = count, fill = 0)
# Perform chi-squared test
chi_sq_result <- chisq.test(contingency_table)
View(contingency_table)
# Create a contingency table from the summarized data
contingency_table <- matrix(cleaned_df_filtered$count, nrow = 2)
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n())
# Create a contingency table from the summarized data
contingency_table <- matrix(cleaned_df_filtered$count, nrow = 2)
View(contingency_table)
contingency_table <- cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n())
# Perform chi-squared test
chi_sq_result <- chisq.test(contingency_table)
head(cleaned_df_filtered)
# Step 1: Calculate the counts for each tag
count_0 <- sum(data$tag_variable == 0)
count_1 <- sum(data$tag_variable == 1)
# Step 2: Create a contingency table
contingency_table <- matrix(c(count_0, count_1), nrow = 1)
# Step 3: Perform chi-squared test
chi_sq_result <- chisq.test(contingency_table)
# Step 4: Interpret results
print(chi_sq_result)
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "", y = "Count") +
theme_minimal()
# Add concrete median binary variable
cleaned_df_filtered$concrete_median <- as.fact(ifelse(cleaned_df_filtered$New_ID_1 == "con", 1, 0))
# Add concrete median binary variable
cleaned_df_filtered$concrete_median <- as.factor(ifelse(cleaned_df_filtered$New_ID_1 == "con", 1, 0))
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
ggplot(aes(x = factor(concrete_median), y = count)) +
geom_boxplot(fill = "blue", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_boxplot(fill = "blue", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(Pair_ID) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(Pair_ID) %>%
summarise(count = n()) %>%
ggplot(aes(x = Pair_ID, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(Pair_ID) %>%
summarise(count = n()) %>%
ggplot(aes(x = as.factor(Pair_ID), y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
n(count(cleaned_df_filtered$Pair_ID))
count(cleaned_df_filtered$Pair_ID)
length(unique(cleaned_df_filtered$Pair_ID))
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer")
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer")
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer") >%>
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of deer hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of deer hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Deer Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Frequency of Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of deer hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Mule (or Black tailed) Deer") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "red", color = "black", alpha = 0.7) +
labs(title = "Frequency of Deer Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of coyote hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Coyote") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "red", color = "black", alpha = 0.7) +
labs(title = "Frequency of Coyote Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of coyote hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Owl") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "red", color = "black", alpha = 0.7) +
labs(title = "Frequency of Coyote Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()
# Visualize histogram of coyote hits per concrete vs non-concrete median type
cleaned_df_filtered %>%
filter(animal == "Coyote") %>%
group_by(concrete_median) %>%
summarise(count = n()) %>%
ggplot(aes(x = concrete_median, y = count)) +
geom_bar(stat = "identity", fill = "red", color = "black", alpha = 0.7) +
labs(title = "Frequency of Coyote Hits by Concrete vs Non-concrete Medians", x = "Concrete Median", y = "Count") +
theme_minimal()

set1= sort(unique(joined_gdf$nid))
set2 = sort(unique(medians_df$nid))
all(set1 == set2)
na_indices <- which(is.na(joined_gdf$MedianType))
View(na_df)
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
View(medians_df)
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE)
# Set paths
shp_file <- "D:\\Median Barriers\\CROS Search\\Output Data\\D9_deer_AADT\\d9_deer_AADT.shp"
excel_file <- "C:\\Users\\HP\\Downloads\\Deer CROS Medians (3).xlsx"
# Read shp into gdf
deer_gdf <- st_read(shp_file)
library(dplyr)
library(sf)
library(readxl)
library(lubridate)
library(ggplot2)
# Set paths
shp_file <- "D:\\Median Barriers\\CROS Search\\Output Data\\D9_deer_AADT\\d9_deer_AADT.shp"
excel_file <- "C:\\Users\\HP\\Downloads\\Deer CROS Medians (3).xlsx"
# Read shp into gdf
deer_gdf <- st_read(shp_file)
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my"))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
#joined_gdf <- medians_df
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE)
# Create frequency table
freq_table <- table(joined_gdf$MedianType)
# Print the frequency table
print(freq_table)
# Create a bar plot
barplot(freq_table,
main = "Frequency of Median Types in Roadkill Observations",
#xlab = "Median Types",
ylab = "Frequency",
)
# Perform chi-squared test
chi_square_test <- chisq.test(freq_table)
# Print the chi-squared test results
print(chi_square_test)
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
() +
set1= sort(unique(joined_gdf$nid))
set2 = sort(unique(medians_df$nid))
all(set1 == set2)
na_indices <- which(is.na(joined_gdf$MedianType))
na_df = joined_gdf[which(is.na(joined_gdf$MedianType)), ]
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE)
# Create frequency table
freq_table <- table(joined_gdf$MedianType)
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE, na.rm = TRUE)
# Create frequency table
freq_table <- table(joined_gdf$MedianType)
# Print the frequency table
print(freq_table)
# Create a bar plot
barplot(freq_table,
main = "Frequency of Median Types in Roadkill Observations",
#xlab = "Median Types",
ylab = "Frequency",
)
# Perform chi-squared test
chi_square_test <- chisq.test(freq_table)
# Print the chi-squared test results
print(chi_square_test)
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
() +
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
() +
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
#() +
geom_boxplot() +
labs(title = "Traffic Volume Distribution by Median Type",
x = "Median Type",
y = "Traffic Volume (AADT)") +
theme_minimal()
is.na(joined_gdf$MedianType)
any(is.na(joined_gdf$MedianType))
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
filter(!MedianType == NA)
filter(!is.na(MedianType)
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
filter(!is.na(MedianType))
# Create frequency table
freq_table <- table(joined_gdf$MedianType)
# Print the frequency table
print(freq_table)
# Create a bar plot
barplot(freq_table,
main = "Frequency of Median Types in Roadkill Observations",
#xlab = "Median Types",
ylab = "Frequency",
)
# Perform chi-squared test
chi_square_test <- chisq.test(freq_table)
# Print the chi-squared test results
print(chi_square_test)
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
#() +
geom_boxplot() +
labs(title = "Traffic Volume Distribution by Median Type",
x = "Median Type",
y = "Traffic Volume (AADT)") +
theme_minimal()
summarh(joined_gdf$AADT)
summary(joined_gdf$AADT)
summary(joined_gdf$AADT %>% MedianType == concrete)
joined_gdf %>%
group_by(MedianType) %>%
summary(AADT)
joined_gdf %>%
group_by(MedianType) %>%
summary(joined_gdf$AADT)
plot(density(joined_gdf$AADT))
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
geom_boxplot() +
labs(title = "Traffic Volume Distribution by Median Type",
x = "Median Type",
y = "Traffic Volume (AADT)") +
theme_minimal()
View(joined_gdf)
length(joined_gdf$condition == Dead)
length(joined_gdf$condition == "Dead")
length(joined_gdf$condition == "Alive")
length(joined_gdf[which(joined_gdf$condition == "Alive"),]
length(joined_gdf[which(joined_gdf$condition == "Alive"),])
length(joined_gdf[joined_gdf$condition == "Alive", ])
length(joined_gdf[joined_gdf$condition == "Alive/No Injury", ])
length(joined_gdf[joined_gdf$condition == "Dead", ])
unique(joined_gdf$condition)
length(joined_gdf[joined_gdf$condition == "Live", ])
length(joined_gdf[joined_gdf$condition == "Injured", ])
length(joined_gdf[joined_gdf$'condition' == "Injured", ])
sum(joined_gdf[joined_gdf$'condition' == "Injured", ])
nrow(joined_gdf[joined_gdf$'condition' == "Injured", ])
nrow(joined_gdf[joined_gdf$condition == "Injured", ])
nrow(joined_gdf[joined_gdf$condition == "Alive", ])
nrow(joined_gdf[joined_gdf$condition == "Dead", ])
nrow(joined_gdf[joined_gdf$condition == c("Dead", "Injured"), ])
nrow(joined_gdf[joined_gdf$condition %in% c("Dead", "Injured"), ])
is.na(joined_gdf$condition)
any(is.na(joined_gdf$condition))
nrow(joined_gdf[joined_gdf$condition %in% c("Dead", "Injured", 'Live'), ])
nrow(joined_gdf[joined_gdf$condition %in% c("Dead", "Injured", ''), ])
nrow(joined_gdf[joined_gdf$condition %in% c("Live"), ])
nrow(joined_gdf[joined_gdf$condition %in% c("Live", "Dead"), ])
nrow(joined_gdf[joined_gdf$condition %in% c("Live", "Dead", "Injured"), ])
nrow(joined_gdf[joined_gdf$condition %in% c("Injured"), ])
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
filter(!is.na(MedianType)) %>%
filter(condition %in% c("Injured", "Dead"))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(as.Date(observatio))
View(joined_gdf)
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
format(df$datetime, "%Y/%m/%d")
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
format(observatio, "%Y/%m/%d")
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observation = ymd_hms(observation, tz = "UTC")) %>%
mutate(observation = format(observation, "%Y/%m/%d"))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio, tz = "UTC")) %>%
mutate(observatio = format(observatio, "%Y/%m/%d"))
View(joined_gdf)
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio, tz = "UTC")) %>%
mutate(observatio = format(observatio, "%Y-%m-%d"))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio, tz = "UTC")) %>%
mutate(observation = parse_date_time(observation, orders = "my")) %>%
mutate(observation = format(observation, "%Y-%m-%d"))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observation = ymd_hms(observatio, tz = "UTC")) %>%
mutate(observation = parse_date_time(observation, orders = "my")) %>%
mutate(observation = format(observation, "%Y-%m-%d"))
View(joined_gdf)
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observation = ymd_hms(observatio, tz = "UTC")) %>%
#mutate(observation = parse_date_time(observation, orders = "my")) %>%
mutate(observation = format(observation, "%Y-%m-%d"))
View(joined_gdf)
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
filter(!is.na(MedianType)) %>% # Remove NA's
filter(condition %in% c("Injured", "Dead")) # Select injured or killed deer
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observation = ymd_hms(observatio)) %>%
mutate(observation = format(observation, "%Y-%m-%d"))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio)) %>%
mutate(observatio = format(observatio, "%Y-%m-%d"))
View(joined_gdf)
ggplot(joined_gdf, aes(x = observatio, y = StreetImageryDate)) +
geom_point() +
labs(x = "X Axis Label",
y = "Y Axis Label",
title = "Scatterplot Example")
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
View(medians_df)
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
filter(!is.na(MedianType)) %>% # Remove NA's
filter(condition %in% c("Injured", "Dead")) # Select injured or killed deer
View(joined_gdf)
ggplot(joined_gdf, aes(x = observatio, y = StreetImageryDate)) +
geom_point() +
labs(x = "X Axis Label",
y = "Y Axis Label",
title = "Scatterplot Example")
ggplot(joined_gdf, aes(x = MedianType, y = StreetImageryDate)) +
geom_point() +
labs(x = "X Axis Label",
y = "Y Axis Label",
title = "Scatterplot Example")
ggplot(joined_gdf, aes(x = MedianType, y = observatio)) +
geom_point() +
labs(x = "X Axis Label",
y = "Y Axis Label",
title = "Scatterplot Example")
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio)) %>%
mutate(observatio = format(observatio, "%Y"))
year_gdf <- joined_gdf %>%
mutate(StreetImageryDate = year(StreetImageryDate)) %>%
mutate(observatio = year(observatio))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio)) %>%
mutate(observatio = format(observatio, "%Y-%m-%d"))
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio)) %>%
mutate(observatio = format(observatio, "%Y-%m-%d"))
View(joined_gdf)
library(zoo)
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = paste0("1/", StreetImageryDate)) %>%
mutate(StreetImageryDate = as.yearmon(StreetImageryDate, "%m/%Y")) %>%
mutate(StreetImageryDate = as.Date(StreetImageryDate))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
View(medians_df)
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
#mutate(StreetImageryDate = paste0("1/", StreetImageryDate)) %>%
mutate(StreetImageryDate = as.yearmon(StreetImageryDate, "%m/%Y")) %>%
mutate(StreetImageryDate = as.Date(StreetImageryDate))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
View(medians_df)
library(dplyr)
library(sf)
library(readxl)
library(lubridate)
library(ggplot2)
# Set paths
shp_file <- "D:\\Median Barriers\\CROS Search\\Output Data\\D9_deer_AADT\\d9_deer_AADT.shp"
excel_file <- "C:\\Users\\HP\\Downloads\\Deer CROS Medians (3).xlsx"
# Read shp into gdf
deer_gdf <- st_read(shp_file)
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = paste0("1/", StreetImageryDate)) %>%  # Add day component
mutate(StreetImageryDate = mdy(StreetImageryDate))  # Convert to Date format
})
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = paste0("1/", StreetImageryDate)) %>%  # Add day component
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "mdy"))
})
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = paste0("1/", StreetImageryDate)) %>%  # Add day component
mutate(StreetImageryDate = mdy(StreetImageryDate))  # Convert to Date format
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
View(medians_df)
library(dplyr)
library(sf)
library(readxl)
library(lubridate)
library(ggplot2)
# Set paths
shp_file <- "D:\\Median Barriers\\CROS Search\\Output Data\\D9_deer_AADT\\d9_deer_AADT.shp"
excel_file <- "C:\\Users\\HP\\Downloads\\Deer CROS Medians (3).xlsx"
# Read shp into gdf
deer_gdf <- st_read(shp_file)
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
#joined_gdf <- medians_df
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE) %>%
filter(!is.na(MedianType)) %>% # Remove NA's
filter(condition %in% c("Injured", "Dead")) # Select injured or killed deer
# Create frequency table
freq_table <- table(joined_gdf$MedianType)
# Print the frequency table
print(freq_table)
# Create a bar plot
barplot(freq_table,
main = "Frequency of Median Types in Roadkill Observations",
#xlab = "Median Types",
ylab = "Frequency",
)
# Perform chi-squared test
chi_square_test <- chisq.test(freq_table)
# Print the chi-squared test results
print(chi_square_test)
# Compare median dates to observation dates
joined_gdf <- joined_gdf %>%
mutate(observatio = ymd_hms(observatio)) %>%
mutate(observatio = format(observatio, "%Y-%m-%d"))
ggplot(joined_gdf, aes(x = MedianType, y = StreetImageryDate)) +
geom_point() +
labs(x = "X Axis Label",
y = "Y Axis Label",
title = "Scatterplot Example")
ggplot(joined_gdf, aes(x = MedianType, y = AADT, fill = MedianType)) +
geom_boxplot() +
labs(title = "Traffic Volume Distribution by Median Type",
x = "Median Type",
y = "Traffic Volume (AADT)") +
theme_minimal()
plot(density(joined_gdf$AADT))
modelmodelmodel <- glm(roadkill_freq ~ continuous_var + covariate1 + covariate2, family = poisson, data = your_data)
# Print the frequency table
print(freq_table)
ibrary(dplyr)
library(dplyr)
library(sf)
library(readxl)
library(lubridate)
library(ggplot2)
# Set paths
excel_file <- "C:\\Users\\HP\\Downloads\\Deer CROS Medians (3).xlsx"
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
medians_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
rename(nid = NID)
View(medians_df)
# Read shp into gdf
deer_gdf <- st_read(shp_file)
# Set paths
shp_file <- "D:\\Median Barriers\\CROS Search\\Output Data\\D9_deer_AADT\\d9_deer_AADT.shp"
# Read shp into gdf
deer_gdf <- st_read(shp_file)
# Join medians df to deer gdf
joined_gdf <- merge(deer_gdf, medians_df, by = "nid", all = FALSE)
View(joined_gdf)
length(unique(joined_gdf$latitude))
# Count occurrences of each latitude and longitude pair
df_count <- df %>%
group_by(latitude, longitude) %>%
summarise(count = n())
# Count occurrences of each latitude and longitude pair
df_count <- joined_gdf %>%
group_by(latitude, longitude) %>%
summarise(count = n())
View(df_count)
# Count occurrences of each latitude and longitude pair
df_count <- joined_gdf %>%
group_by(latitude, longitude) %>%
summarise(count = n(), .groups = 'drop')
View(df_count)
length(unique(joined_gdf$longitude))
length(unique(joined_gdf$latitude))
nrow(distinct(joined_gdf, latitude, longitude))
# Count occurrences of each latitude and longitude pair
# Group by latitude and longitude and assign group numbers
grouped_gdf <- joined_gdf %>%
group_by(latitude, longitude) %>%
mutate(group_number = cur_group_id()) %>%
ungroup()  # Optional: Ungroup if you no longer need the grouping
View(grouped_gdf)
length(unique(grouped_gdf$group_number))
sliced_gdf <- grouped_gdf %>%
group_by(latitude, longitude) %>%
slice(1) %>%
ungroup()
View(sliced_gdf)
freq_table <- table(sliced_gdf$MedianType)
freq_table
